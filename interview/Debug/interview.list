
interview.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000244  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000103f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000103f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000103f8  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000103f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010428  2**0
                  CONTENTS, READONLY
 14 .debug_info   000003ba  00000000  00000000  0001046b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000151  00000000  00000000  00010825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000098  00000000  00000000  00010978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000063  00000000  00000000  00010a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00001187  00000000  00000000  00010a73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000009b5  00000000  00000000  00011bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00004120  00000000  00000000  000125af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00000164  00000000  00000000  000166d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00016834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080003d8 	.word	0x080003d8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080003d8 	.word	0x080003d8

080001ec <io_write>:

#include <stdint.h>
#include <gpio.h>


void io_write(register uint32_t addr, register uint32_t val) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	4602      	mov	r2, r0
 80001f2:	460b      	mov	r3, r1
    /**
     * r is put the value to general register
     * Qo is let the input be memory address, arm specific
     */
    asm volatile("str %1, %0"
 80001f4:	6013      	str	r3, [r2, #0]
            : : "Qo" (*(volatile uint32_t *) addr), "r" (val));
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <io_read>:

uint32_t io_read(register uint32_t addr) {
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
    /**
     * r is put the value to general register
     * Qo is let the input be memory address, arm specific
     */
	uint32_t val;
    asm volatile("ldr %0, %1"
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	607b      	str	r3, [r7, #4]
            : "=r" (val)
            : "Qo" (*(volatile uint32_t *) addr));
    return val;
 800020c:	687b      	ldr	r3, [r7, #4]
}
 800020e:	4618      	mov	r0, r3
 8000210:	370c      	adds	r7, #12
 8000212:	46bd      	mov	sp, r7
 8000214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000218:	4770      	bx	lr
	...

0800021c <gpio_init>:

int gpio_init(int port_offset){
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
	int rcc_status = io_read(RCC_REGISTER + RCC_AHB1_ENR);
 8000224:	4808      	ldr	r0, [pc, #32]	; (8000248 <gpio_init+0x2c>)
 8000226:	f7ff ffeb 	bl	8000200 <io_read>
 800022a:	4603      	mov	r3, r0
 800022c:	60fb      	str	r3, [r7, #12]
	io_write(RCC_REGISTER + RCC_AHB1_ENR , rcc_status|port_offset);  // IO port clock enabled
 800022e:	68fa      	ldr	r2, [r7, #12]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	4313      	orrs	r3, r2
 8000234:	4619      	mov	r1, r3
 8000236:	4804      	ldr	r0, [pc, #16]	; (8000248 <gpio_init+0x2c>)
 8000238:	f7ff ffd8 	bl	80001ec <io_write>
	return 0;
 800023c:	2300      	movs	r3, #0
}
 800023e:	4618      	mov	r0, r3
 8000240:	3710      	adds	r7, #16
 8000242:	46bd      	mov	sp, r7
 8000244:	bd80      	pop	{r7, pc}
 8000246:	bf00      	nop
 8000248:	40023830 	.word	0x40023830

0800024c <gpio_set_dir>:

int gpio_set_dir(int port_add , int pin , int mode){
 800024c:	b580      	push	{r7, lr}
 800024e:	b086      	sub	sp, #24
 8000250:	af00      	add	r7, sp, #0
 8000252:	60f8      	str	r0, [r7, #12]
 8000254:	60b9      	str	r1, [r7, #8]
 8000256:	607a      	str	r2, [r7, #4]
	int pin_status = io_read(port_add + GPIO_MODE);
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	4618      	mov	r0, r3
 800025c:	f7ff ffd0 	bl	8000200 <io_read>
 8000260:	4603      	mov	r3, r0
 8000262:	617b      	str	r3, [r7, #20]
	int pin_mode_offset = mode << pin*2;
 8000264:	68bb      	ldr	r3, [r7, #8]
 8000266:	005b      	lsls	r3, r3, #1
 8000268:	687a      	ldr	r2, [r7, #4]
 800026a:	fa02 f303 	lsl.w	r3, r2, r3
 800026e:	613b      	str	r3, [r7, #16]
	io_write(port_add + GPIO_MODE , pin_status|pin_mode_offset);  // set output mode
 8000270:	68f8      	ldr	r0, [r7, #12]
 8000272:	697a      	ldr	r2, [r7, #20]
 8000274:	693b      	ldr	r3, [r7, #16]
 8000276:	4313      	orrs	r3, r2
 8000278:	4619      	mov	r1, r3
 800027a:	f7ff ffb7 	bl	80001ec <io_write>
	return 0;
 800027e:	2300      	movs	r3, #0
}
 8000280:	4618      	mov	r0, r3
 8000282:	3718      	adds	r7, #24
 8000284:	46bd      	mov	sp, r7
 8000286:	bd80      	pop	{r7, pc}

08000288 <gpio_set_data>:

int gpio_set_data(int port_add , int pin , int data){
 8000288:	b580      	push	{r7, lr}
 800028a:	b086      	sub	sp, #24
 800028c:	af00      	add	r7, sp, #0
 800028e:	60f8      	str	r0, [r7, #12]
 8000290:	60b9      	str	r1, [r7, #8]
 8000292:	607a      	str	r2, [r7, #4]
	int pin_status = io_read(port_add + GPIO_OUTPUT_DATA);
 8000294:	68fb      	ldr	r3, [r7, #12]
 8000296:	3314      	adds	r3, #20
 8000298:	4618      	mov	r0, r3
 800029a:	f7ff ffb1 	bl	8000200 <io_read>
 800029e:	4603      	mov	r3, r0
 80002a0:	617b      	str	r3, [r7, #20]
	int pin_data_offset = data << pin;
 80002a2:	687a      	ldr	r2, [r7, #4]
 80002a4:	68bb      	ldr	r3, [r7, #8]
 80002a6:	fa02 f303 	lsl.w	r3, r2, r3
 80002aa:	613b      	str	r3, [r7, #16]
	io_write(port_add + GPIO_OUTPUT_DATA , pin_status|pin_data_offset);  // set output voltage
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	3314      	adds	r3, #20
 80002b0:	4618      	mov	r0, r3
 80002b2:	697a      	ldr	r2, [r7, #20]
 80002b4:	693b      	ldr	r3, [r7, #16]
 80002b6:	4313      	orrs	r3, r2
 80002b8:	4619      	mov	r1, r3
 80002ba:	f7ff ff97 	bl	80001ec <io_write>
	return 0;
 80002be:	2300      	movs	r3, #0
}
 80002c0:	4618      	mov	r0, r3
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}

080002c8 <gpio_pull>:

int gpio_pull(int port_add , int pin , int pull_mode){
 80002c8:	b580      	push	{r7, lr}
 80002ca:	b086      	sub	sp, #24
 80002cc:	af00      	add	r7, sp, #0
 80002ce:	60f8      	str	r0, [r7, #12]
 80002d0:	60b9      	str	r1, [r7, #8]
 80002d2:	607a      	str	r2, [r7, #4]
	int pin_status = io_read(port_add + GPIO_PULL);
 80002d4:	68fb      	ldr	r3, [r7, #12]
 80002d6:	330c      	adds	r3, #12
 80002d8:	4618      	mov	r0, r3
 80002da:	f7ff ff91 	bl	8000200 <io_read>
 80002de:	4603      	mov	r3, r0
 80002e0:	617b      	str	r3, [r7, #20]
	int pin_pull_offset = pull_mode << pin*2;
 80002e2:	68bb      	ldr	r3, [r7, #8]
 80002e4:	005b      	lsls	r3, r3, #1
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	fa02 f303 	lsl.w	r3, r2, r3
 80002ec:	613b      	str	r3, [r7, #16]
	io_write(port_add + GPIO_PULL , pin_status|pin_pull_offset);  // set output voltage
 80002ee:	68fb      	ldr	r3, [r7, #12]
 80002f0:	330c      	adds	r3, #12
 80002f2:	4618      	mov	r0, r3
 80002f4:	697a      	ldr	r2, [r7, #20]
 80002f6:	693b      	ldr	r3, [r7, #16]
 80002f8:	4313      	orrs	r3, r2
 80002fa:	4619      	mov	r1, r3
 80002fc:	f7ff ff76 	bl	80001ec <io_write>
	return 0;
 8000300:	2300      	movs	r3, #0
}
 8000302:	4618      	mov	r0, r3
 8000304:	3718      	adds	r7, #24
 8000306:	46bd      	mov	sp, r7
 8000308:	bd80      	pop	{r7, pc}
	...

0800030c <main>:




int main(void)
{
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
	gpio_init(INIT_PORT_G);
 8000310:	2040      	movs	r0, #64	; 0x40
 8000312:	f7ff ff83 	bl	800021c <gpio_init>
	gpio_set_dir(GPIO_PORT_G , GPIO_PIN_14 , GPIO_OUTPUT);
 8000316:	2201      	movs	r2, #1
 8000318:	210e      	movs	r1, #14
 800031a:	4807      	ldr	r0, [pc, #28]	; (8000338 <main+0x2c>)
 800031c:	f7ff ff96 	bl	800024c <gpio_set_dir>
	gpio_set_data(GPIO_PORT_G , GPIO_PIN_14 , GPIO_HIGH_VAL);
 8000320:	2201      	movs	r2, #1
 8000322:	210e      	movs	r1, #14
 8000324:	4804      	ldr	r0, [pc, #16]	; (8000338 <main+0x2c>)
 8000326:	f7ff ffaf 	bl	8000288 <gpio_set_data>
	gpio_pull(GPIO_PORT_G , GPIO_PIN_14 , GPIO_NO_PULL);
 800032a:	2200      	movs	r2, #0
 800032c:	210e      	movs	r1, #14
 800032e:	4802      	ldr	r0, [pc, #8]	; (8000338 <main+0x2c>)
 8000330:	f7ff ffca 	bl	80002c8 <gpio_pull>
	io_write(0x40021800 + 0x14, 0x2000);  // PG13 set bit
	io_write(0x40021800 + 0x00, 0x4000000);  // PG13 set output mode
	io_write(0x40021800 + 0x0C, 0x0);  // PG13 set No pull-up, pull-down
	io_write(0x40021800 + 0x08, 0x0);  // PG13 set Low speed*/

	while(1){
 8000334:	e7fe      	b.n	8000334 <main+0x28>
 8000336:	bf00      	nop
 8000338:	40021800 	.word	0x40021800

0800033c <Reset_Handler>:
 800033c:	480d      	ldr	r0, [pc, #52]	; (8000374 <LoopForever+0x2>)
 800033e:	4685      	mov	sp, r0
 8000340:	f3af 8000 	nop.w
 8000344:	480c      	ldr	r0, [pc, #48]	; (8000378 <LoopForever+0x6>)
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <LoopForever+0xa>)
 8000348:	4a0d      	ldr	r2, [pc, #52]	; (8000380 <LoopForever+0xe>)
 800034a:	2300      	movs	r3, #0
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:
 800034e:	58d4      	ldr	r4, [r2, r3]
 8000350:	50c4      	str	r4, [r0, r3]
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:
 8000354:	18c4      	adds	r4, r0, r3
 8000356:	428c      	cmp	r4, r1
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>
 800035a:	4a0a      	ldr	r2, [pc, #40]	; (8000384 <LoopForever+0x12>)
 800035c:	4c0a      	ldr	r4, [pc, #40]	; (8000388 <LoopForever+0x16>)
 800035e:	2300      	movs	r3, #0
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:
 8000362:	6013      	str	r3, [r2, #0]
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:
 8000366:	42a2      	cmp	r2, r4
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
 800036e:	f7ff ffcd 	bl	800030c <main>

08000372 <LoopForever>:
 8000372:	e7fe      	b.n	8000372 <LoopForever>
 8000374:	20030000 	.word	0x20030000
 8000378:	20000000 	.word	0x20000000
 800037c:	20000000 	.word	0x20000000
 8000380:	080003f8 	.word	0x080003f8
 8000384:	20000000 	.word	0x20000000
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC_IRQHandler>:
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	; (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	; (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	; (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	; (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
