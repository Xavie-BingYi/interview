
interview.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000138  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  4 .ARM          00000000  080002e4  080002e4  000102ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e4  080002ec  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e8  080002e8  000102e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000102ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000102ec  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000102ec  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0001031c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00000127  00000000  00000000  0001035f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000000d2  00000000  00000000  00010486  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000058  00000000  00000000  00010558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000038  00000000  00000000  000105b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00000f5e  00000000  00000000  000105e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000004b6  00000000  00000000  00011546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00003bfe  00000000  00000000  000119fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000000a0  00000000  00000000  000155fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0001569c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080002cc 	.word	0x080002cc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	080002cc 	.word	0x080002cc

080001ec <io_write>:
 ******************************************************************************
 */

#include <stdint.h>

void io_write(register uint32_t addr, register uint32_t val) {
 80001ec:	b480      	push	{r7}
 80001ee:	af00      	add	r7, sp, #0
 80001f0:	4602      	mov	r2, r0
 80001f2:	460b      	mov	r3, r1
    /**
     * r is put the value to general register
     * Qo is let the input be memory address, arm specific
     */
    asm volatile("str %1, %0"
 80001f4:	6013      	str	r3, [r2, #0]
            : : "Qo" (*(volatile uint32_t *) addr), "r" (val));
}
 80001f6:	bf00      	nop
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <main>:
    return val;
}


int main(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
	io_write(0x40023800 + 0x30, 0x40);  // IO port G clock enabled
 8000204:	2140      	movs	r1, #64	; 0x40
 8000206:	4807      	ldr	r0, [pc, #28]	; (8000224 <main+0x24>)
 8000208:	f7ff fff0 	bl	80001ec <io_write>
	//io_write(0x40021800 + 0x18, 0x2000);  // PG13 set bit
	io_write(0x40021800 + 0x14, 0x2000);  // PG13 set bit
 800020c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000210:	4805      	ldr	r0, [pc, #20]	; (8000228 <main+0x28>)
 8000212:	f7ff ffeb 	bl	80001ec <io_write>
	io_write(0x40021800 + 0x00, 0x4000000);  // PG13 set output mode
 8000216:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800021a:	4804      	ldr	r0, [pc, #16]	; (800022c <main+0x2c>)
 800021c:	f7ff ffe6 	bl	80001ec <io_write>
	//io_write(0x40021800 + 0x0C, 0x0);  // PG13 set No pull-up, pull-down
	//io_write(0x40021800 + 0x08, 0x0);  // PG13 set Low speed

	while(1){
 8000220:	e7fe      	b.n	8000220 <main+0x20>
 8000222:	bf00      	nop
 8000224:	40023830 	.word	0x40023830
 8000228:	40021814 	.word	0x40021814
 800022c:	40021800 	.word	0x40021800

08000230 <Reset_Handler>:
 8000230:	480d      	ldr	r0, [pc, #52]	; (8000268 <LoopForever+0x2>)
 8000232:	4685      	mov	sp, r0
 8000234:	f3af 8000 	nop.w
 8000238:	480c      	ldr	r0, [pc, #48]	; (800026c <LoopForever+0x6>)
 800023a:	490d      	ldr	r1, [pc, #52]	; (8000270 <LoopForever+0xa>)
 800023c:	4a0d      	ldr	r2, [pc, #52]	; (8000274 <LoopForever+0xe>)
 800023e:	2300      	movs	r3, #0
 8000240:	e002      	b.n	8000248 <LoopCopyDataInit>

08000242 <CopyDataInit>:
 8000242:	58d4      	ldr	r4, [r2, r3]
 8000244:	50c4      	str	r4, [r0, r3]
 8000246:	3304      	adds	r3, #4

08000248 <LoopCopyDataInit>:
 8000248:	18c4      	adds	r4, r0, r3
 800024a:	428c      	cmp	r4, r1
 800024c:	d3f9      	bcc.n	8000242 <CopyDataInit>
 800024e:	4a0a      	ldr	r2, [pc, #40]	; (8000278 <LoopForever+0x12>)
 8000250:	4c0a      	ldr	r4, [pc, #40]	; (800027c <LoopForever+0x16>)
 8000252:	2300      	movs	r3, #0
 8000254:	e001      	b.n	800025a <LoopFillZerobss>

08000256 <FillZerobss>:
 8000256:	6013      	str	r3, [r2, #0]
 8000258:	3204      	adds	r2, #4

0800025a <LoopFillZerobss>:
 800025a:	42a2      	cmp	r2, r4
 800025c:	d3fb      	bcc.n	8000256 <FillZerobss>
 800025e:	f000 f811 	bl	8000284 <__libc_init_array>
 8000262:	f7ff ffcd 	bl	8000200 <main>

08000266 <LoopForever>:
 8000266:	e7fe      	b.n	8000266 <LoopForever>
 8000268:	20030000 	.word	0x20030000
 800026c:	20000000 	.word	0x20000000
 8000270:	20000000 	.word	0x20000000
 8000274:	080002ec 	.word	0x080002ec
 8000278:	20000000 	.word	0x20000000
 800027c:	2000001c 	.word	0x2000001c

08000280 <ADC_IRQHandler>:
 8000280:	e7fe      	b.n	8000280 <ADC_IRQHandler>
	...

08000284 <__libc_init_array>:
 8000284:	b570      	push	{r4, r5, r6, lr}
 8000286:	4d0d      	ldr	r5, [pc, #52]	; (80002bc <__libc_init_array+0x38>)
 8000288:	4c0d      	ldr	r4, [pc, #52]	; (80002c0 <__libc_init_array+0x3c>)
 800028a:	1b64      	subs	r4, r4, r5
 800028c:	10a4      	asrs	r4, r4, #2
 800028e:	2600      	movs	r6, #0
 8000290:	42a6      	cmp	r6, r4
 8000292:	d109      	bne.n	80002a8 <__libc_init_array+0x24>
 8000294:	4d0b      	ldr	r5, [pc, #44]	; (80002c4 <__libc_init_array+0x40>)
 8000296:	4c0c      	ldr	r4, [pc, #48]	; (80002c8 <__libc_init_array+0x44>)
 8000298:	f000 f818 	bl	80002cc <_init>
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	10a4      	asrs	r4, r4, #2
 80002a0:	2600      	movs	r6, #0
 80002a2:	42a6      	cmp	r6, r4
 80002a4:	d105      	bne.n	80002b2 <__libc_init_array+0x2e>
 80002a6:	bd70      	pop	{r4, r5, r6, pc}
 80002a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ac:	4798      	blx	r3
 80002ae:	3601      	adds	r6, #1
 80002b0:	e7ee      	b.n	8000290 <__libc_init_array+0xc>
 80002b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b6:	4798      	blx	r3
 80002b8:	3601      	adds	r6, #1
 80002ba:	e7f2      	b.n	80002a2 <__libc_init_array+0x1e>
 80002bc:	080002e4 	.word	0x080002e4
 80002c0:	080002e4 	.word	0x080002e4
 80002c4:	080002e4 	.word	0x080002e4
 80002c8:	080002e8 	.word	0x080002e8

080002cc <_init>:
 80002cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ce:	bf00      	nop
 80002d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d2:	bc08      	pop	{r3}
 80002d4:	469e      	mov	lr, r3
 80002d6:	4770      	bx	lr

080002d8 <_fini>:
 80002d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002da:	bf00      	nop
 80002dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002de:	bc08      	pop	{r3}
 80002e0:	469e      	mov	lr, r3
 80002e2:	4770      	bx	lr
